<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">
	
	<!-- Shiro 的Web过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
       <property name="securityManager" ref="securityManager" />
       <!-- loginUrl认证提交地址，如果没有认证将会请求此地址进行认证，请求此地址将由formAuthenticationFilter进行表单认证 -->
       <property name="loginUrl" value="/login" />
       <property name="unauthorizedUrl" value="/refuse.jsp" />
       <property name="filters">
            <util:map>
                <entry key="authc" value-ref="formAuthenticationFilter"/>
            </util:map>
        </property>
       <!-- 过虑器链定义，从上向下顺序执行，一般将/**放在最下边 -->
       <property name="filterChainDefinitions">
           <value>
           	  /index.jsp = anon
              <!-- 退出拦截，请求logout.action执行退出操作 -->
              /logout = logout
              <!-- 无权访问页面 -->
              /refuse.jsp = anon
              <!-- roles[XX]表示有XX角色才可访问 -->
              /item/list.action = roles[item],authc
              /js/** anon
              /images/** anon
              /styles/** anon
              /validatecode.jsp anon
              /item/* authc
              <!-- user表示身份认证通过或通过记住我认证通过的可以访问 -->
              /** = authc
           </value>
       </property>
    </bean>
    
    <!-- 基于Form表单的身份验证过滤器 -->  
	<bean id="formAuthenticationFilter"   
	class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">  
	    <property name="usernameParam" value="username"/>  
	    <property name="passwordParam" value="password"/>  
	    <property name="loginUrl" value="/login.jsp"/>  
	</bean>  
    
    <!-- 缓存管理器 使用Ehcache实现 -->  
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">  
	    <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>  
	</bean>  

    <!-- 凭证匹配器 -->
    <bean id="credentialsMatcher" class="com.hsf.stdntapt.tool.RetryLimitHashedCredentialsMatcher">
       <constructor-arg ref="cacheManager"/>
       <property name="hashAlgorithmName" value="md5" />
       <property name="hashIterations" value="2"/>  
    	<property name="storedCredentialsHexEncoded" value="true"/>
    </bean>
    
    <!-- Realm实现 -->  
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">  
	    <property name="driverClassName" value="com.mysql.jdbc.Driver" />  
	    <property name="url"  
	        value="jdbc:mysql://localhost:3306/apartment" />  
	    <property name="username" value="root" />  
	    <property name="password" value="123456" />  
	</bean>
    <bean id="jdbcRealm" class="org.apache.shiro.realm.jdbc.JdbcRealm">  
        <property name="dataSource" ref="dataSource"/>  
        <property name="permissionsLookupEnabled" value="true"/>  
        <property name="saltStyle" value="COLUMN"/>
        <property name="credentialsMatcher" ref="credentialsMatcher"/>   
        <property name="authenticationQuery" value="select password, concat(username,password_salt) from users where username = ?" />  
        <property name="userRolesQuery" value="select r.role_code from rms_role r,rms_user u,rms_user_role ur where r.id = ur.role_id and u.id = ur.user_id and u.login_name = ?"/>  
        <property name="permissionsQuery" value="select distinct p.priv_code from rms_privilege p,rms_role r,rms_role_privilege rp where p.id = rp.priv_id and r.id = rp.role_id and r.role_code = ?"/> 
        <property name="cachingEnabled" value="true"/>  
	    <property name="authenticationCachingEnabled" value="true"/>  
	    <property name="authenticationCacheName" value="authenticationCache"/>  
	    <property name="authorizationCachingEnabled" value="true"/>  
	    <property name="authorizationCacheName" value="authorizationCache"/>  
    </bean> 
	<!-- 会话ID生成器 -->  
	<bean id="sessionIdGenerator"   
	class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>  
	<!-- 会话DAO -->  
	<bean id="sessionDAO"   
	class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">  
	    <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>  
	    <property name="sessionIdGenerator" ref="sessionIdGenerator"/>  
	</bean>  
	<!-- 会话验证调度器 -->  
	<bean id="sessionValidationScheduler"   
	class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">  
	    <property name="sessionValidationInterval" value="1800000"/>  
	    <property name="sessionManager" ref="sessionManager"/>  
	</bean>  
	<!-- 会话Cookie模板 -->  
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">  
	    <constructor-arg value="sid"/>  
	    <property name="httpOnly" value="true"/>  
	    <property name="maxAge" value="180000"/>  
	</bean>
	<!-- 会话管理器 -->  
	<bean id="sessionManager"   
	class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">  
	    <property name="globalSessionTimeout" value="1800000"/>  
	    <property name="deleteInvalidSessions" value="true"/>  
	    <property name="sessionValidationSchedulerEnabled" value="true"/>  
	    <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>  
	    <property name="sessionDAO" ref="sessionDAO"/>  
	    <property name="sessionIdCookieEnabled" value="true"/>  
	    <property name="sessionIdCookie" ref="sessionIdCookie"/>  
	</bean>  
	<!-- 安全管理器 -->  
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">  
	    <property name="realm" ref="jdbcRealm"/>
	    <property name="sessionManager" ref="sessionManager"/>  
	    <property name="cacheManager" ref="cacheManager"/>  
	</bean>  
	<!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->  
	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">  
	<property name="staticMethod"   
	value="org.apache.shiro.SecurityUtils.setSecurityManager"/>  
	    <property name="arguments" ref="securityManager"/>  
	</bean>  
	<!-- Shiro生命周期处理器-->  
	<bean id="lifecycleBeanPostProcessor"   
	class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/> 
    
</beans>