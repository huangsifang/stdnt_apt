<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hsf.stdntapt.dao.HolidayDao">
    <select id="findAllHolidays" parameterType="int" resultType="Holiday">
        select holi_id as holiId, holi_name as holiName, start_time as startTime, end_time as endTime from holiday 
        where deleted=0
    </select>
    <insert id="createHoliday" parameterType="Holiday" useGeneratedKeys="true" keyProperty="holiday.holiId">
        INSERT INTO holiday(
        	<if test="holiday.holiId != null">holi_id,</if>
	        <if test="holiday.holiName != null">holi_name,</if>
	        <if test="holiday.startTime != null">start_time,</if>
	        <if test="holiday.endTime != null">end_time</if>
		) VALUES (
			<if test="holiday.holiId != null">#{holiday.holiId},</if>
	        <if test="holiday.holiName != null">#{holiday.holiName},</if>
	        <if test="holiday.startTime != null">#{holiday.startTime},</if>
	        <if test="holiday.endTime != null">#{holiday.endTime}</if>
		)
    </insert>
    <update id="updateHoliday" parameterType="Holiday" useGeneratedKeys="true" keyProperty="holiday.holiId">
    	UPDATE holiday SET 
    		holi_name = #{holiday.holiName}, 
    		start_time = #{holiday.startTime},
    		end_time = #{holiday.endTime}
    		where holi_id = #{holiday.holiId}
    </update>
    <delete id="deleteHoliday" parameterType="int">
		delete from holiday where holi_id=#{holiId}
	</delete>
	<select id="findHoliName" parameterType="int" resultType="String">
        select holi_name as holiName from holiday 
        where holi_id=#{holiId} and deleted=0
    </select>
	<select id="findHoliRecord" parameterType="int" resultType="HoliRecord">
        select holi_id as holiId, std_id as stdId, apart_id as apartId, start_time as startTime, end_time as endTime, in_home as inHome, is_out as isOut, address from holi_record 
        where holi_id=#{holiId} and std_id=#{stdId} and deleted=0
    </select>
    <select id="findApartAllRecords" parameterType="int" resultType="HoliRecord">
        select holi_id as holiId, std_id as stdId, apart_id as apartId, start_time as startTime, end_time as endTime, in_home as inHome, is_out as isOut, address 
        from holi_record 
        where apart_id=#{apartId} and holi_id=#{holiId} and deleted=0
    </select>
    <select id="findApartAllRecordsByPage" parameterType="int" resultType="HoliRecord">
        select holi_id as holiId, std_id as stdId, apart_id as apartId, start_time as startTime, end_time as endTime, in_home as inHome, is_out as isOut, address 
        from holi_record 
        where apart_id=#{apartId} and holi_id=#{holiId} and deleted=0 
        order by id desc limit #{start},#{size}
    </select>
    <select id="findApartAllHoliRecords" parameterType="int" resultType="HoliRecord">
        select holi_id as holiId, std_id as stdId, apart_id as apartId, start_time as startTime, end_time as endTime, in_home as inHome, is_out as isOut, address 
        from holi_record 
        where apart_id=#{apartId} and deleted=0
    </select>
	<select id="findApartAllHomeRecords" parameterType="int" resultType="HoliRecord">
        select holi_id as holiId, std_id as stdId, start_time as startTime, end_time as endTime, address from holi_record 
        where apart_id=#{record.apartId}  and holi_id=#{holiId} and in_home=true and deleted=0
    </select>
    <select id="findApartAllSchoolRecords" parameterType="int" resultType="HoliRecord">
        select holi_id as holiId, std_id as stdId, start_time as startTime, end_time as endTime, is_out as isOut from holi_record 
        where apart_id=#{record.apartId}  and holi_id=#{holiId} and in_home=false and deleted=0
    </select>
    <insert id="createHoliRecord" parameterType="HoliRecord" useGeneratedKeys="true" keyProperty="record.id">
        INSERT INTO holi_record(
        	<if test="record.holiId != null">holi_id,</if>
	        <if test="record.stdId != null">std_id,</if>
	        <if test="record.apartId != null">apart_id,</if>
	        <if test="record.startTime != null">start_time,</if>
	        <if test="record.endTime != null">end_time,</if>
	        <if test="record.inHome != null">in_home,</if>
	        <if test="!record.inHome">is_out</if>
	        <if test="record.address != null">address</if>
		) VALUES (
			<if test="record.holiId != null">#{record.holiId},</if>
	        <if test="record.stdId != null">#{record.stdId},</if>
	        <if test="record.apartId != null">#{record.apartId},</if>
	        <if test="record.startTime != null">#{record.startTime},</if>
	        <if test="record.endTime != null">#{record.endTime},</if>
	        <if test="record.inHome != null">#{record.inHome},</if>
	        <if test="!record.inHome">#{record.isOut}</if>
	        <if test="record.address != null">#{record.address}</if>
		)
    </insert>
    <update id="deleteHoliRecord" parameterType="int">
		UPDATE holi_record SET
			deleted=1
			where holi_id=#{holiId} and std_id=#{stdId}
	</update>
	<select id="findStdHoliBack" parameterType="int" resultType="HoliBack">
        select holi_id as holiId, std_id as stdId, back_time as backTime from holi_back 
        where holi_id=#{holiId} and std_id=#{stdId} and deleted=0
    </select>
    <insert id="createHoliBack" parameterType="HoliBack" useGeneratedKeys="true" keyProperty="back.holiId">
        INSERT INTO holi_back(
        	<if test="back.holiId != null">holi_id,</if>
	        <if test="back.stdId != null">std_id</if>
		) VALUES (
			<if test="back.holiId != null">#{back.holiId},</if>
	        <if test="back.stdId != null">#{back.stdId}</if>
		)
    </insert>
</mapper>